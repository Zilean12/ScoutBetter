import { jsPDF } from "jspdf";

export const generatePDFReport = (resumeText, role, analysisData) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 10; // Margin for the document
  const lineHeight = 10; // Line height for text
  let cursorY = margin; // Track the vertical position of text

  // Helper to check and add a new page if needed
  const addNewPageIfNeeded = () => {
    if (cursorY + lineHeight > pageHeight - margin) {
      doc.addPage();
      cursorY = margin;
    }
  };

  // Add title
  doc.setFontSize(16);
  doc.text("Resume Analysis Report", margin, cursorY);
  cursorY += lineHeight * 1.5;

  // Add job role
  doc.setFontSize(12);
  doc.text(`Job Role: ${role}`, margin, cursorY);
  cursorY += lineHeight;

  // Add analysis section
  doc.setFontSize(12);
  doc.text("Analysis:", margin, cursorY);
  cursorY += lineHeight;

  // Split text into lines that fit within the page width
  doc.setFontSize(10);
  const analysisLines = doc.splitTextToSize(analysisData.analysis, pageWidth - 2 * margin);
  analysisLines.forEach((line) => {
    addNewPageIfNeeded();
    doc.text(line, margin, cursorY);
    cursorY += lineHeight;
  });

  cursorY += lineHeight / 2;

  // Add scoring criteria
  doc.setFontSize(12);
  addNewPageIfNeeded();
  doc.text("Resume Score:", margin, cursorY);
  cursorY += lineHeight;

  doc.setFontSize(10);
  doc.text(`Score: ${analysisData.score}/100`, margin, cursorY);
  cursorY += lineHeight;

  // Add strengths and weaknesses (if available)
  if (analysisData.strengths || analysisData.weaknesses) {
    addNewPageIfNeeded();
    doc.setFontSize(12);
    doc.text("Key Highlights:", margin, cursorY);
    cursorY += lineHeight;

    if (analysisData.strengths) {
      doc.setFontSize(10);
      const strengthsText = `Strengths: ${analysisData.strengths.join(", ")}`;
      const strengthsLines = doc.splitTextToSize(strengthsText, pageWidth - 2 * margin);
      strengthsLines.forEach((line) => {
        addNewPageIfNeeded();
        doc.text(line, margin, cursorY);
        cursorY += lineHeight;
      });
    }

    if (analysisData.weaknesses) {
      const weaknessesText = `Weaknesses: ${analysisData.weaknesses.join(", ")}`;
      const weaknessesLines = doc.splitTextToSize(weaknessesText, pageWidth - 2 * margin);
      weaknessesLines.forEach((line) => {
        addNewPageIfNeeded();
        doc.text(line, margin, cursorY);
        cursorY += lineHeight;
      });
    }
  }

  // Add footer (optional)
  const footerText = "Generated by Resume Analyzer";
  doc.setFontSize(8);
  const footerY = pageHeight - margin;
  for (let i = 1; i <= doc.internal.getNumberOfPages(); i++) {
    doc.setPage(i);
    doc.text(footerText, margin, footerY);
  }

  // Save the PDF
  doc.save("Resume_Analysis_Report.pdf");
};
