// import { jsPDF } from "jspdf";

// export const generatePDFReport = (resumeText, role, analysisData) => {
//   const doc = new jsPDF();
//   const pageWidth = doc.internal.pageSize.getWidth();
//   const pageHeight = doc.internal.pageSize.getHeight();
//   const margin = 10; // Margin for the document
//   const lineHeight = 10; // Line height for text
//   let cursorY = margin; // Track the vertical position of text

//   // Helper to check and add a new page if needed
//   const addNewPageIfNeeded = () => {
//     if (cursorY + lineHeight > pageHeight - margin) {
//       doc.addPage();
//       cursorY = margin;
//     }
//   };

//   // Add title
//   doc.setFontSize(16);
//   doc.text("Resume Analysis Report", margin, cursorY);
//   cursorY += lineHeight * 1.5;

//   // Add job role
//   doc.setFontSize(12);
//   doc.text(`Job Role: ${role}`, margin, cursorY);
//   cursorY += lineHeight;

//   // Add analysis section
//   doc.setFontSize(12);
//   doc.text("Analysis:", margin, cursorY);
//   cursorY += lineHeight;

//   // Split text into lines that fit within the page width
//   doc.setFontSize(10);
//   const analysisLines = doc.splitTextToSize(analysisData.analysis, pageWidth - 2 * margin);
//   analysisLines.forEach((line) => {
//     addNewPageIfNeeded();
//     doc.text(line, margin, cursorY);
//     cursorY += lineHeight;
//   });

//   cursorY += lineHeight / 2;

//   // Add scoring criteria
//   doc.setFontSize(12);
//   addNewPageIfNeeded();
//   doc.text("Resume Score:", margin, cursorY);
//   cursorY += lineHeight;

//   doc.setFontSize(10);
//   doc.text(`Score: ${analysisData.score}/100`, margin, cursorY);
//   cursorY += lineHeight;

//   // Add strengths and weaknesses (if available)
//   if (analysisData.strengths || analysisData.weaknesses) {
//     addNewPageIfNeeded();
//     doc.setFontSize(12);
//     doc.text("Key Highlights:", margin, cursorY);
//     cursorY += lineHeight;

//     if (analysisData.strengths) {
//       doc.setFontSize(10);
//       const strengthsText = `Strengths: ${analysisData.strengths.join(", ")}`;
//       const strengthsLines = doc.splitTextToSize(strengthsText, pageWidth - 2 * margin);
//       strengthsLines.forEach((line) => {
//         addNewPageIfNeeded();
//         doc.text(line, margin, cursorY);
//         cursorY += lineHeight;
//       });
//     }

//     if (analysisData.weaknesses) {
//       const weaknessesText = `Weaknesses: ${analysisData.weaknesses.join(", ")}`;
//       const weaknessesLines = doc.splitTextToSize(weaknessesText, pageWidth - 2 * margin);
//       weaknessesLines.forEach((line) => {
//         addNewPageIfNeeded();
//         doc.text(line, margin, cursorY);
//         cursorY += lineHeight;
//       });
//     }
//   }

//   // Add footer (optional)
//   const footerText = "Generated by Resume Analyzer";
//   doc.setFontSize(8);
//   const footerY = pageHeight - margin;
//   for (let i = 1; i <= doc.internal.getNumberOfPages(); i++) {
//     doc.setPage(i);
//     doc.text(footerText, margin, footerY);
//   }

//   // Save the PDF
//   doc.save("Resume_Analysis_Report.pdf");
// };

// import { jsPDF } from "jspdf";

// export const generatePDFReport = (resumeText, role, analysisData, username, contactNo) => {
//   const doc = new jsPDF();
//   const pageWidth = doc.internal.pageSize.getWidth();
//   const pageHeight = doc.internal.pageSize.getHeight();
//   const margin = 10; // Margin for the document
//   const lineHeight = 10; // Line height for text
//   let cursorY = margin; // Track the vertical position of text

//   // Helper to check and add a new page if needed
//   const addNewPageIfNeeded = () => {
//     if (cursorY + lineHeight > pageHeight - margin) {
//       doc.addPage();
//       cursorY = margin;
//     }
//   };

//   // Add title
//   doc.setFontSize(16);
//   doc.text("Resume Analysis Report", margin, cursorY);
//   cursorY += lineHeight * 1.5;

//   // Add candidate details
//   doc.setFontSize(12);
//   doc.text(`Candidate Name: ${username}`, margin, cursorY);
//   cursorY += lineHeight;

//   doc.text(`Contact Number: ${contactNo}`, margin, cursorY);
//   cursorY += lineHeight;

//   // Add job role
//   doc.text(`Job Role: ${role}`, margin, cursorY);
//   cursorY += lineHeight;

//   // Add analysis section
//   doc.setFontSize(12);
//   doc.text("Analysis:", margin, cursorY);
//   cursorY += lineHeight;

//   // Split text into lines that fit within the page width
//   doc.setFontSize(10);
//   const analysisLines = doc.splitTextToSize(analysisData.analysis, pageWidth - 2 * margin);
//   analysisLines.forEach((line) => {
//     addNewPageIfNeeded();
//     doc.text(line, margin, cursorY);
//     cursorY += lineHeight;
//   });

//   cursorY += lineHeight / 2;

//   // Add scoring criteria
//   doc.setFontSize(12);
//   addNewPageIfNeeded();
//   doc.text("Resume Score:", margin, cursorY);
//   cursorY += lineHeight;

//   doc.setFontSize(10);
//   doc.text(`Score: ${analysisData.score}/100`, margin, cursorY);
//   cursorY += lineHeight;

//   // Add strengths and weaknesses (if available)
//   if (analysisData.strengths || analysisData.weaknesses) {
//     addNewPageIfNeeded();
//     doc.setFontSize(12);
//     doc.text("Key Highlights:", margin, cursorY);
//     cursorY += lineHeight;

//     if (analysisData.strengths) {
//       doc.setFontSize(10);
//       const strengthsText = `Strengths: ${analysisData.strengths.join(", ")}`;
//       const strengthsLines = doc.splitTextToSize(strengthsText, pageWidth - 2 * margin);
//       strengthsLines.forEach((line) => {
//         addNewPageIfNeeded();
//         doc.text(line, margin, cursorY);
//         cursorY += lineHeight;
//       });
//     }

//     if (analysisData.weaknesses) {
//       const weaknessesText = `Weaknesses: ${analysisData.weaknesses.join(", ")}`;
//       const weaknessesLines = doc.splitTextToSize(weaknessesText, pageWidth - 2 * margin);
//       weaknessesLines.forEach((line) => {
//         addNewPageIfNeeded();
//         doc.text(line, margin, cursorY);
//         cursorY += lineHeight;
//       });
//     }
//   }

//   // Add footer (optional)
//   const footerText = "Generated by Resume Analyzer";
//   doc.setFontSize(8);
//   const footerY = pageHeight - margin;
//   for (let i = 1; i <= doc.internal.getNumberOfPages(); i++) {
//     doc.setPage(i);
//     doc.text(footerText, margin, footerY);
//   }

//   // Save the PDF with username in the filename
//   const fileName = username ? `Resume_Analysis_Report_${username}.pdf` : "Resume_Analysis_Report.pdf";
//   doc.save(fileName);
// };

import { jsPDF } from "jspdf";

export const generatePDFReport = (resumeText, role, analysisData, username, contactNo) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20; // Margin for the document
  const lineHeight = 14; // Line height for text
  const titleFontSize = 24; // Larger title font size for more impact
  const sectionHeadingFontSize = 18; // Larger font for section headings
  const normalFontSize = 12; // Standard text font size
  const subTextFontSize = 10; // Footer font size
  const sectionSpacing = 10; // Extra space between sections
  let cursorY = margin; // Track the vertical position of text

  // Helper to check and add a new page if needed
  const addNewPageIfNeeded = () => {
    if (cursorY + lineHeight > pageHeight - margin) {
      doc.addPage();
      cursorY = margin;
    }
  };

  // Add a custom title with bold and larger font
  doc.setFont("helvetica", "bold");
  doc.setFontSize(titleFontSize);
  const title = "Resume Analysis Report";
  const titleWidth = doc.getTextWidth(title);
  const titleX = (pageWidth - titleWidth) / 2; // Centered title
  doc.text(title, titleX, cursorY);
  cursorY += lineHeight * 2; // Add extra space after the title

  // Add job role section
  doc.setFontSize(sectionHeadingFontSize);
  doc.setFont("helvetica", "bold");
  doc.text("Job Role:", margin, cursorY);
  doc.setFont("helvetica", "italic");
  doc.text(role, margin + 40, cursorY); // Indented value for role
  cursorY += lineHeight * 1.5; // Add space after role

  // Add horizontal line to separate sections
  doc.setLineWidth(0.5);
  doc.line(margin, cursorY, pageWidth - margin, cursorY);
  cursorY += sectionSpacing; // Space below the line

  // Add analysis section with bold heading and slightly larger font for clarity
  doc.setFontSize(sectionHeadingFontSize);
  doc.setFont("helvetica", "bold");
  doc.text("Analysis:", margin, cursorY);
  cursorY += sectionSpacing;

  // Split analysis text into lines that fit within the page width and apply formatting
  doc.setFontSize(normalFontSize);
  doc.setFont("helvetica", "normal");
  const analysisLines = doc.splitTextToSize(analysisData.analysis, pageWidth - 2 * margin);
  analysisLines.forEach((line) => {
    addNewPageIfNeeded();
    doc.text(line, margin, cursorY);
    cursorY += lineHeight;
  });

  cursorY += sectionSpacing;

  // Add scoring criteria with bold and larger font
  doc.setFontSize(sectionHeadingFontSize);
  addNewPageIfNeeded();
  doc.setFont("helvetica", "bold");
  doc.text("Resume Score:", margin, cursorY);
  cursorY += lineHeight;

  doc.setFontSize(normalFontSize);
  doc.setFont("helvetica", "normal");
  doc.text(`Score: ${analysisData.score}/100`, margin + 40, cursorY); // Indented score
  cursorY += sectionSpacing;

  // Add horizontal line for visual separation
  doc.setLineWidth(0.5);
  doc.line(margin, cursorY, pageWidth - margin, cursorY);
  cursorY += sectionSpacing; // Space below the line

  // Add project details (if available)
  if (analysisData.projects) {
    addNewPageIfNeeded();
    doc.setFontSize(sectionHeadingFontSize);
    doc.setFont("helvetica", "bold");
    doc.text("Project Details:", margin, cursorY);
    cursorY += sectionSpacing;

    analysisData.projects.forEach((project) => {
      if (project.name) {
        doc.setFontSize(normalFontSize);
        doc.setFont("helvetica", "bold");
        doc.text(`**${project.name}**`, margin, cursorY);
        cursorY += lineHeight;

        if (project.strengths) {
          doc.setFont("helvetica", "normal");
          const strengthsText = `Strengths: ${project.strengths}`;
          const strengthsLines = doc.splitTextToSize(strengthsText, pageWidth - 2 * margin);
          strengthsLines.forEach((line) => {
            addNewPageIfNeeded();
            doc.text(line, margin + 10, cursorY); // Indented for better readability
            cursorY += lineHeight;
          });
        }

        if (project.weaknesses) {
          doc.setFont("helvetica", "normal");
          const weaknessesText = `Weaknesses: ${project.weaknesses}`;
          const weaknessesLines = doc.splitTextToSize(weaknessesText, pageWidth - 2 * margin);
          weaknessesLines.forEach((line) => {
            addNewPageIfNeeded();
            doc.text(line, margin + 10, cursorY); // Indented for better readability
            cursorY += lineHeight;
          });
        }
      }
    });
  }

  // Add certifications (if available)
  if (analysisData.certifications) {
    addNewPageIfNeeded();
    doc.setFontSize(sectionHeadingFontSize);
    doc.setFont("helvetica", "bold");
    doc.text("Certifications:", margin, cursorY);
    cursorY += sectionSpacing;

    analysisData.certifications.forEach((certification) => {
      doc.setFontSize(normalFontSize);
      doc.setFont("helvetica", "bold");
      doc.text(`**${certification.name}**`, margin, cursorY);
      cursorY += lineHeight;

      if (certification.strengths) {
        doc.setFont("helvetica", "normal");
        const strengthsText = `Strengths: ${certification.strengths}`;
        const strengthsLines = doc.splitTextToSize(strengthsText, pageWidth - 2 * margin);
        strengthsLines.forEach((line) => {
          addNewPageIfNeeded();
          doc.text(line, margin + 10, cursorY); // Indented for better readability
          cursorY += lineHeight;
        });
      }

      if (certification.weaknesses) {
        doc.setFont("helvetica", "normal");
        const weaknessesText = `Weaknesses: ${certification.weaknesses}`;
        const weaknessesLines = doc.splitTextToSize(weaknessesText, pageWidth - 2 * margin);
        weaknessesLines.forEach((line) => {
          addNewPageIfNeeded();
          doc.text(line, margin + 10, cursorY); // Indented for better readability
          cursorY += lineHeight;
        });
      }
    });
  }

  // Add Strengths and Weaknesses section
  if (analysisData.strengths || analysisData.weaknesses) {
    addNewPageIfNeeded();
    doc.setFontSize(sectionHeadingFontSize);
    doc.setFont("helvetica", "bold");
    doc.text("Strengths & Weaknesses:", margin, cursorY);
    cursorY += sectionSpacing;

    // Strengths
    if (analysisData.strengths) {
      doc.setFontSize(normalFontSize);
      doc.setFont("helvetica", "normal");
      const strengthsText = `Strengths: ${analysisData.strengths.join(", ")}`;
      const strengthsLines = doc.splitTextToSize(strengthsText, pageWidth - 2 * margin);
      strengthsLines.forEach((line) => {
        addNewPageIfNeeded();
        doc.text(line, margin, cursorY);
        cursorY += lineHeight;
      });
    }

    // Weaknesses
    if (analysisData.weaknesses) {
      doc.setFontSize(normalFontSize);
      doc.setFont("helvetica", "normal");
      const weaknessesText = `Weaknesses: ${analysisData.weaknesses.join(", ")}`;
      const weaknessesLines = doc.splitTextToSize(weaknessesText, pageWidth - 2 * margin);
      weaknessesLines.forEach((line) => {
        addNewPageIfNeeded();
        doc.text(line, margin, cursorY);
        cursorY += lineHeight;
      });
    }
  }

  cursorY += sectionSpacing;

  // Add footer (optional) with smaller font and centered
  const footerText = "Generated by Resume Analyzer";
  doc.setFontSize(subTextFontSize);
  const footerY = pageHeight - margin / 2;
  for (let i = 1; i <= doc.internal.getNumberOfPages(); i++) {
    doc.setPage(i);
    const footerWidth = doc.getTextWidth(footerText);
    const footerX = (pageWidth - footerWidth) / 2;
    doc.text(footerText, footerX, footerY);
  }

  // Save the PDF with username in the filename
  doc.save(`Resume_Analysis_Report_${username}.pdf`);
};
